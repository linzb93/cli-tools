---
description: 
globs: 
alwaysApply: false
---
# 测试规则

## 测试框架

本项目使用 Vitest 作为测试框架。Vitest 是一个基于 Vite 的测试框架，具有快速的执行速度和与 Vite 生态系统的无缝集成。

## 测试文件组织

- 所有测试文件应使用 `.test.ts` 或 `.spec.ts` 后缀
- 组件测试文件应使用 `.test.tsx` 或 `.spec.tsx` 后缀
- 测试文件应放在专门的 `tests` 目录中，保持与源代码相同的目录结构

例如：
```
src/
  components/
    Button/
      Button.tsx
  utils/
    format.ts
tests/
  components/
    Button/
      Button.test.tsx  # 与源代码相同的路径结构
  utils/
    format.test.ts     # 与源代码相同的路径结构
```

## 测试命名约定

- 测试套件名称应描述被测试的组件或功能
- 测试用例名称应描述预期行为，并遵循 "它应该..." 的格式

```typescript
describe('Button 组件', () => {
  it('应该正确渲染默认样式', () => {
    // 测试代码
  });
  
  it('应该在点击时触发 onClick 事件', () => {
    // 测试代码
  });
});
```

## 测试覆盖率要求

- 业务逻辑代码的测试覆盖率应达到至少 80%
- 工具函数和核心组件的测试覆盖率应达到至少 90%
- UI 组件应测试关键功能和边界条件

## 测试分类

### 单元测试

单元测试应专注于测试单个函数、组件或模块的行为，并尽可能模拟外部依赖。

```typescript
import { describe, it, expect } from 'vitest';
import { formatDate } from '../../src/utils/format';

describe('formatDate', () => {
  it('应该正确格式化日期', () => {
    const date = new Date('2023-01-01');
    expect(formatDate(date, 'YYYY-MM-DD')).toBe('2023-01-01');
  });
});
```

### 组件测试

对于 Vue 组件，使用 `@vue/test-utils` 进行测试：

```typescript
import { describe, it, expect } from 'vitest';
import { mount } from '@vue/test-utils';
import Button from '../../src/components/Button/Button.vue';

describe('Button 组件', () => {
  it('应该正确渲染文本内容', () => {
    const wrapper = mount(Button, {
      props: {
        label: '点击我'
      }
    });
    expect(wrapper.text()).toContain('点击我');
  });
});
```

### 集成测试

集成测试应关注多个组件或模块之间的交互：

```typescript
import { describe, it, expect } from 'vitest';
import { mount } from '@vue/test-utils';
import TodoList from '../../src/components/TodoList/TodoList.vue';
import TodoItem from '../../src/components/TodoItem/TodoItem.vue';

describe('TodoList 集成', () => {
  it('应该正确渲染多个 TodoItem 组件', () => {
    const wrapper = mount(TodoList, {
      props: {
        todos: [
          { id: 1, text: '任务 1', completed: false },
          { id: 2, text: '任务 2', completed: true }
        ]
      }
    });
    expect(wrapper.findAllComponents(TodoItem)).toHaveLength(2);
  });
});
```

## 模拟（Mock）和存根（Stub）

- 使用 Vitest 的 `vi.mock()` 和 `vi.fn()` 来模拟外部依赖
- 对于异步操作，使用 `vi.useFakeTimers()` 控制时间

```typescript
import { describe, it, expect, vi } from 'vitest';
import { fetchData } from '../../src/api';
import { processData } from '../../src/process';

vi.mock('../../src/api', () => ({
  fetchData: vi.fn()
}));

describe('processData', () => {
  it('应该正确处理获取的数据', async () => {
    fetchData.mockResolvedValue({ id: 1, name: '测试' });
    const result = await processData();
    expect(result).toEqual({ id: 1, name: '测试', processed: true });
  });
});
```

## 测试脚本

在各个包的 `package.json` 中应包含以下测试脚本：

```json
{
  "scripts": {
    "test": "vitest run",
    "test:watch": "vitest",
    "test:coverage": "vitest run --coverage"
  }
}
```

## 持续集成

- 所有提交到主分支的代码必须通过所有测试
- Pull Request 必须包含适当的测试覆盖
- CI 流程应自动运行测试并报告结果

## 最佳实践

- 保持测试简单和可读
- 每个测试只测试一个概念
- 避免测试实现细节，专注于行为
- 使用工厂函数创建测试数据
- 在适当的情况下使用 `beforeEach` 和 `afterEach` 设置和清理测试环境
