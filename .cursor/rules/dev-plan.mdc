---
description: 
globs: 
alwaysApply: false
---
# 开发模式  

项目采用R1辅助的开发模式，基于RIPER协议执行：  

## 开发流程模式  

- **研究模式（Research）**：收集信息和理解代码结构，不提出具体实现  
- **创新模式（Innovation）**：讨论潜在方案和思路，探索可能的实现方式  
- **计划模式（Planning）**：创建详细的技术规范和实施步骤  
- **执行模式（Execution）**：准确执行计划中的步骤，实现代码  
- **审核模式（Review）**：验证实现与计划的一致性，标记偏差  
- **快速模式（Rapid）**：以最广变更快速执行特定任务  

## RIPER协议规则  

1. 每个任务都以明确声明的模式开始（默认为快速模式）  
2. 模式之间的转换必须通过明确指令（如“进入执行模式”）  
3. 每次回复必须同时删除模式（如“[模式：执行]”）  
4. 执行模式必须100%覆盖计划，不做创新决策  
5. 审核模式必须标记所有与计划的偏差  
6. 不同模式有不同的输出格式和约束  

这种模式设计专为与A1助手协作开发而优化，确保开发过程的可控性和可预测性。  

## 开发计划指南  

## development_plan.md 编写思路  

`docs/development_plan.md` 文件是本项目的开发蓝图，采用特定结构设计：  

1. **任务组织结构**：  
   - 按版本划分（v1.0，v2.0，v3.0）  
   - 按开发顺序排列任务  
   - 每个任务明确标注依赖关系  
   - 无优先级区分，严格按顺序执行  

2. **任务描述格式**：  
   - **Task标识**：使用TASK编号（如TASK0001）  
   - **基本信息**：版本、状态、依赖任务  
   - **任务列表**：具体实施步骤  
   - **AI辅助编程提示词**：可直接用于AI开发工具  
   - **验收标准**：明确完成标准  
   - **注意事项**：实施过程中的关键考虑点  

3. **特殊设计要素**：  
   - 进程处理器采用点位ID和事件类型的命名规范（如`P002LfyBmOut_EV00100`）  
   - 基于点位和事件类型的消息路由机制  
   - 多层次系统架构（数据层、服务器、控制层、前端）  

## 执行指导  

对于AI代理和开发者，执行development_plan.md时应遵循以下原则：  

1. **严格顺序执行**：  
   - 按照任务编写顺序依次实施  
   - 确保依赖任务先完成  

2. **任务实施方法**：  
   - 使用任务中的AI辅助编程提示词作为指令  
   - 先实现测试，后实现功能（测试驱动开发）  
   - 确保满足所有验收标准  

3. **变更管理**：  
   - 任何需求变更应先更新development_plan.md  
   - 保持代码与计划的一致性  

4. **代码规范**：  
   - 后端使用PPP8标准  
   - 前端使用ESLint规范  
   - 维持一致的命名约定  

本开发计划设计专为A1辅助编程而优化。每个任务都包含明确的提示词，可直接用于开发。  

## 开发计划参考  

详细的开发任务和实施计划请参见【开发计划文档】(docs/development_plan.md)

# 版本1.0（最小可行产品）  

版本1.0的目标是实现系统的基础功能，包括进程管理、资源监控、消息队列集成和基础架构搭建。  

## TASK0001：项目基础结构搭建  
- **版本**: v1.0  
- **状态**: 计划中  
- **依赖任务**: 无  

### 描述  
创建项目基础结构，设置开发环境配置。包含目录结构、Flask后端框架、Vue3前端框架初始化。  

### 子任务  
1. [ ] 创建目录结构  
2. [ ] 初始化Git仓库  
3. [ ] 设置Flask基础项目  
4. [ ] 设置Vue3基础项目  
5. [ ] 添加基础配置文件  
6. [ ] 创建进程处理器目录结构（`backend/processors/`）  

### AI辅助编程提示词  
请创建一个基于Flask和Vue3的前后端分离项目结构，用于Windows进程管理系统。  

---

### 后端需求：  
1. 创建以下目录结构：  
   - backend/  
   - models/（数据模型）  
   - services/（业务逻辑）  
   - controllers/（API控制器）  
   - tasks/（进程任务定义）  
   - monitors/（资源监控）  
   - workers/（任务工作进程）  
   - processors/（进程处理器，命名格式为`[点位ID]_[事件类型].py`）  
   - utils/（工具函数）  
   - tests/（测试用例）  

2. 创建以下文件：  
   - backend/app.py（应用入口）  
   - backend/config.py（配置文件）  
   - backend/requirements.txt（依赖列表）  
   - 每个模块下的`__init__.py`文件  

---

### 前端需求：  
1. 创建Vue3项目结构：  
   - frontend/  
   - public/  
   - src/  
     - assets/  
     - components/  
     - views/  
     - router/  
     - store/  
     - services/（API服务）  
     - utils/  

---

### 配置文件需求：  
1. 数据库连接（SQL Server）  
2. RabbitMQ连接  
3. 日志配置  
4. 环境变量支持  

所有Python代码使用PEP8规范，前端代码使用ESLint规范。  

---

### 验收标准  
- [ ] 目录结构完整创建  
- [ ] Flask应用可以正常启动  
- [ ] Vue3应用可以正常启动  
- [ ] 配置文件包含必要的参数  
- [ ] Git仓库正确初始化  

---

### 注意事项  
- 确保配置文件中敏感信息使用环境变量  
- 确保所有模块有清晰的职责划分  
- 为进程处理器创建专门的目录