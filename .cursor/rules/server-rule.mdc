---
description: 
globs: packages/server/**/*.ts
alwaysApply: false
---
# server 子项目规则

本子项目为命令行与Web后端服务相关代码，主要用于实现 命令行与Web接口、服务逻辑等。

## 目录结构
- [src/](mdc:packages/server/src)：主源码目录，包含命令行服务、控制器、模型等

```text
src/
├── cli/           # 命令行相关代码
│   └── commands/  # 命令实现
├── server/        # Web后端相关代码
│   ├── routes/    # 路由定义
│   └── controllers/ # 控制器
├── core/          # 业务相关的共享代码
├── utils/         # 通用工具函数
└──                # 主入口文件
```
- [docs/](mdc:packages/server/docs)：文档相关内容，通过`--help`选项查看。
- [dist/](mdc:packages/server/dist)：编译输出目录
- [vite.config.ts](mdc:packages/server/vite.config.ts)：Vite 配置
- [tsconfig.json](mdc:packages/server/tsconfig.json)：TypeScript 配置
- 其他配置文件如 `env.d.ts`、`README.md` 等

## 常用npm模块
- commander: 管理命令行参数
- lodash-es: 常用工具函数
- fs-extra: 文件读写模块
- execa: 调用命令行
- axios: 发送HTTP请求
- express: 创建HTTP服务器
- dayjs: 处理日期时间相关的库
- chalk: 输出彩色的字体
其他没有提到的模块，请在开发功能的时候，阅读本子项目根目录的`package.json`文件，从中获取合适的模块。

## 命令创建说明
一、当需要创建某个单一命令时，按照以下顺序进行创建：
1、在`packages/server/src/index.ts`新建一条命令。例如我们接下来要创建的是`clear`命令。
```ts

import clear from './cli/clear';

program
    .command('clear [dir]')
    .option('-s,--silent', '静默操作，无输出')
    .action((dir, options) => {
        git(dir, options);
    });

```
2、在`packages/server/src/cli`目录中新建命令同名文件，例如这次我们应该创建的是`clear.ts`。
```ts
import Clear, { Options } from "./core/clear";
export default function (dir: string, options: Options) {
  new Clear().main(dir, options);
}
```
3、在`packages/server/src/core`目录中新建命令同名目录，在目录中创建两个文件：`index.ts`和`ImplementationPlan.md`（内容为空），例如这次我们应该创建的目录名称是`clear`，然后再创建以上2个文件。
`index.ts`代码如下：
```ts
import BaseCommand from '../BaseCommand';
interface Options {
  // 各种命令行选项
}
export default class extends BaseCommand {
  main(dir: string, options: Options) {
    // 编写主业务代码
  }
}
```
二、当需要创建某个命令的子命令时，按照以下顺序进行创建：
1、在`packages/server/src/index.ts`新建一条命令。例如我们接下来要创建的是`git tag`命令。如果`packages/server/src/index.ts`文件里面已经有创建过`git`命令，则跳过这一步。
```ts

import git from './cli/git';

program
    .command('git [sub-command] [rest...]')
    .allowUnknownOption()
    .action((subCommand, rest, cmd) => {
        git(subCommand, rest, cmd);
    });

```
2、在`packages/server/src/cli`目录中,找到主命令的同名文件，例如这次我们应该找到`git.ts`，添加以下代码：
```ts
import Tag, { type Options as TagOptions } from './core/git/tag';
import { subCommandCompiler } from './utils/helper';

const tag = () => {
    subCommandCompiler((program) => {
        program
            .command('tag')
            .option('--delete', '删除tag')
            .action((options: TagOptions) => {
                new Tag().main(options);
            });
    });
};
export default function (subCommand: string, data: string[], options: any) {
    const commandMap = {
        tag, // 每创建一个子命令，在上面创建这个子命令的同名函数，然后在这里引入。
    };
    if (commandMap[subCommand]) {
        commandMap[subCommand]();
    }
}
```
3、在`packages/server/src/core`目录中，这个命令的同名目录中，新建子命令同名目录，在这个目录中创建两个文件：`index.ts`和`ImplementationPlan.md`（内容为空），例如这次我们应该找到`git`目录，在里面创建`tag`目录，然后创建以上两个文件。
`index.ts`代码如下：
```ts
import BaseCommand from '../BaseCommand.ts';

interface Options {
  // 各种命令行选项
}
export default class extends BaseCommand {
  main(options: Options) {
    // 编写主业务代码
  }
}
## 命令修改说明

当需要修改某个命令时，应找到该命令对应的文件进行修改，查找方式，请参考前文“命令创建说明”。
如果有增减功能，需要同步更新`packages/server/src/core`目录下，这个命令目录（含子命令目录）下面的`ImplementationPlan.md`文件，更新需求。

## 命名规范
- 目录、文件名：小写字母+中划线（kebab-case）
- 变量/函数：小驼峰（camelCase）
- 类/类型/接口：大驼峰（PascalCase）
- 常量：全大写+下划线（SNAKE_CASE）

## 代码风格
- 推荐使用 TypeScript。类型声明方面，不要使用`any`类型，不确定的类型请使用`unknown`。
- 所有函数、类、接口、类型、重要变量需使用 JSDoc 注释，说明用途、参数和返回值
- 尽量使用类(class)组织代码。
- 在完成功能后，检查所有有修改的文件行数，如果超过了400行，需要自行检查如何拆分，并进行重构。
- 发送HTTP请求的代码，需要在类里面单独创建一个方法。
